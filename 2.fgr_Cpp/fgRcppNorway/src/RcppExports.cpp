// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// contains_cpp
bool contains_cpp(std::string s, Rcpp::DataFrame L);
RcppExport SEXP _fgRcppNorway_contains_cpp(SEXP sSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(contains_cpp(s, L));
    return rcpp_result_gen;
END_RCPP
}
// extract_create_numcolumns_cpp
Rcpp::NumericVector extract_create_numcolumns_cpp(std::string s, Rcpp::DataFrame DF, int n);
RcppExport SEXP _fgRcppNorway_extract_create_numcolumns_cpp(SEXP sSEXP, SEXP DFSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type DF(DFSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_create_numcolumns_cpp(s, DF, n));
    return rcpp_result_gen;
END_RCPP
}
// extract_create_intcolumns_cpp
Rcpp::IntegerVector extract_create_intcolumns_cpp(std::string s, Rcpp::DataFrame DF, int n);
RcppExport SEXP _fgRcppNorway_extract_create_intcolumns_cpp(SEXP sSEXP, SEXP DFSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type DF(DFSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_create_intcolumns_cpp(s, DF, n));
    return rcpp_result_gen;
END_RCPP
}
// extract_create_strcolumns_cpp
Rcpp::StringVector extract_create_strcolumns_cpp(std::string s, Rcpp::DataFrame DF, int n);
RcppExport SEXP _fgRcppNorway_extract_create_strcolumns_cpp(SEXP sSEXP, SEXP DFSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type DF(DFSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_create_strcolumns_cpp(s, DF, n));
    return rcpp_result_gen;
END_RCPP
}
// sp_params_Norway_fun_cpp
Rcpp::NumericVector sp_params_Norway_fun_cpp(Rcpp::DataFrame species_parameters, Rcpp::String species, Rcpp::String location, Rcpp::String dbh_class, Rcpp::String leafstatus);
RcppExport SEXP _fgRcppNorway_sp_params_Norway_fun_cpp(SEXP species_parametersSEXP, SEXP speciesSEXP, SEXP locationSEXP, SEXP dbh_classSEXP, SEXP leafstatusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type species(speciesSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type location(locationSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dbh_class(dbh_classSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type leafstatus(leafstatusSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_params_Norway_fun_cpp(species_parameters, species, location, dbh_class, leafstatus));
    return rcpp_result_gen;
END_RCPP
}
// top_ht_to_mean_ht_cpp
double top_ht_to_mean_ht_cpp(double param0_height, double param1_height, double top_ht);
RcppExport SEXP _fgRcppNorway_top_ht_to_mean_ht_cpp(SEXP param0_heightSEXP, SEXP param1_heightSEXP, SEXP top_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type param0_height(param0_heightSEXP);
    Rcpp::traits::input_parameter< double >::type param1_height(param1_heightSEXP);
    Rcpp::traits::input_parameter< double >::type top_ht(top_htSEXP);
    rcpp_result_gen = Rcpp::wrap(top_ht_to_mean_ht_cpp(param0_height, param1_height, top_ht));
    return rcpp_result_gen;
END_RCPP
}
// mean_ht_to_top_ht_cpp
double mean_ht_to_top_ht_cpp(double param0_height, double param1_height, double mean_ht);
RcppExport SEXP _fgRcppNorway_mean_ht_to_top_ht_cpp(SEXP param0_heightSEXP, SEXP param1_heightSEXP, SEXP mean_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type param0_height(param0_heightSEXP);
    Rcpp::traits::input_parameter< double >::type param1_height(param1_heightSEXP);
    Rcpp::traits::input_parameter< double >::type mean_ht(mean_htSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_ht_to_top_ht_cpp(param0_height, param1_height, mean_ht));
    return rcpp_result_gen;
END_RCPP
}
// eq_mean_ht_fun_cpp
double eq_mean_ht_fun_cpp(double top_ht);
RcppExport SEXP _fgRcppNorway_eq_mean_ht_fun_cpp(SEXP top_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type top_ht(top_htSEXP);
    rcpp_result_gen = Rcpp::wrap(eq_mean_ht_fun_cpp(top_ht));
    return rcpp_result_gen;
END_RCPP
}
// canopy_width_fun_cpp
double canopy_width_fun_cpp(double param0_cr_width, double param1_cr_width, double dbh);
RcppExport SEXP _fgRcppNorway_canopy_width_fun_cpp(SEXP param0_cr_widthSEXP, SEXP param1_cr_widthSEXP, SEXP dbhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type param0_cr_width(param0_cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type param1_cr_width(param1_cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    rcpp_result_gen = Rcpp::wrap(canopy_width_fun_cpp(param0_cr_width, param1_cr_width, dbh));
    return rcpp_result_gen;
END_RCPP
}
// canopy_depth_Norway_fun_cpp
double canopy_depth_Norway_fun_cpp(std::string species, Rcpp::NumericVector species_parameters, double dbh, double ht, std::string focus);
RcppExport SEXP _fgRcppNorway_canopy_depth_Norway_fun_cpp(SEXP speciesSEXP, SEXP species_parametersSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP focusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type species(speciesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type focus(focusSEXP);
    rcpp_result_gen = Rcpp::wrap(canopy_depth_Norway_fun_cpp(species, species_parameters, dbh, ht, focus));
    return rcpp_result_gen;
END_RCPP
}
// stem_volume_fonweban_cpp
double stem_volume_fonweban_cpp(double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_volume_fonweban_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_volume_fonweban_cpp(dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_volume_quebec_cpp
/* applies the method in Honer 1967 to calculate stem volume.*/ double stem_volume_quebec_cpp(double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_volume_quebec_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_volume_quebec_cpp(dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_volume_laasasenaho_cpp
/* applies the method in Laasasenaho 1982 to calculate stem volume.*/ double stem_volume_laasasenaho_cpp(double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_volume_laasasenaho_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_volume_laasasenaho_cpp(dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_volume_japanese_larch_japan_cpp
/* calculates stem volume for Japanese Larch grown in Japan.*/ double stem_volume_japanese_larch_japan_cpp(double dbh, double ht);
RcppExport SEXP _fgRcppNorway_stem_volume_japanese_larch_japan_cpp(SEXP dbhSEXP, SEXP htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_volume_japanese_larch_japan_cpp(dbh, ht));
    return rcpp_result_gen;
END_RCPP
}
// stem_vol_andretreslag_fun_cpp
double stem_vol_andretreslag_fun_cpp(std::string species, double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_vol_andretreslag_fun_cpp(SEXP speciesSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type species(speciesSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_vol_andretreslag_fun_cpp(species, dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_vol_NSNorway_fun_cpp
double stem_vol_NSNorway_fun_cpp(std::string location, std::string dbh_class, double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_vol_NSNorway_fun_cpp(SEXP locationSEXP, SEXP dbh_classSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type location(locationSEXP);
    Rcpp::traits::input_parameter< std::string >::type dbh_class(dbh_classSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_vol_NSNorway_fun_cpp(location, dbh_class, dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_vol_SPNorway_fun_cpp
double stem_vol_SPNorway_fun_cpp(std::string location, std::string dbh_class, double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_vol_SPNorway_fun_cpp(SEXP locationSEXP, SEXP dbh_classSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type location(locationSEXP);
    Rcpp::traits::input_parameter< std::string >::type dbh_class(dbh_classSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_vol_SPNorway_fun_cpp(location, dbh_class, dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_vol_BINorway_fun_cpp
double stem_vol_BINorway_fun_cpp(std::string location, std::string dbh_class, double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_vol_BINorway_fun_cpp(SEXP locationSEXP, SEXP dbh_classSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type location(locationSEXP);
    Rcpp::traits::input_parameter< std::string >::type dbh_class(dbh_classSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_vol_BINorway_fun_cpp(location, dbh_class, dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// stem_vol_Norway_fun_cpp
double stem_vol_Norway_fun_cpp(std::string species, std::string location, std::string dbh_class, double dbh, double ht, Rcpp::NumericVector species_parameters);
RcppExport SEXP _fgRcppNorway_stem_vol_Norway_fun_cpp(SEXP speciesSEXP, SEXP locationSEXP, SEXP dbh_classSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP species_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type species(speciesSEXP);
    Rcpp::traits::input_parameter< std::string >::type location(locationSEXP);
    Rcpp::traits::input_parameter< std::string >::type dbh_class(dbh_classSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type species_parameters(species_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(stem_vol_Norway_fun_cpp(species, location, dbh_class, dbh, ht, species_parameters));
    return rcpp_result_gen;
END_RCPP
}
// fg_rou_dataprep_Norway_cpp
Rcpp::List fg_rou_dataprep_Norway_cpp(Rcpp::DataFrame inputdata, Rcpp::DataFrame fgr_constants, Rcpp::DataFrame species_parameters, std::string season, std::string country);
RcppExport SEXP _fgRcppNorway_fg_rou_dataprep_Norway_cpp(SEXP inputdataSEXP, SEXP fgr_constantsSEXP, SEXP species_parametersSEXP, SEXP seasonSEXP, SEXP countrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type inputdata(inputdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< std::string >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< std::string >::type country(countrySEXP);
    rcpp_result_gen = Rcpp::wrap(fg_rou_dataprep_Norway_cpp(inputdata, fgr_constants, species_parameters, season, country));
    return rcpp_result_gen;
END_RCPP
}
// fg_tmc_dataprep_Norway_cpp
Rcpp::List fg_tmc_dataprep_Norway_cpp(Rcpp::DataFrame inputdata, Rcpp::DataFrame fgr_constants, Rcpp::DataFrame species_parameters, std::string season, std::string country);
RcppExport SEXP _fgRcppNorway_fg_tmc_dataprep_Norway_cpp(SEXP inputdataSEXP, SEXP fgr_constantsSEXP, SEXP species_parametersSEXP, SEXP seasonSEXP, SEXP countrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type inputdata(inputdataSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< std::string >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< std::string >::type country(countrySEXP);
    rcpp_result_gen = Rcpp::wrap(fg_tmc_dataprep_Norway_cpp(inputdata, fgr_constants, species_parameters, season, country));
    return rcpp_result_gen;
END_RCPP
}
// diam_base_fun_cpp
double diam_base_fun_cpp(double dbh, double ht, double cr_depth);
RcppExport SEXP _fgRcppNorway_diam_base_fun_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP cr_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(diam_base_fun_cpp(dbh, ht, cr_depth));
    return rcpp_result_gen;
END_RCPP
}
// drag_fun_cpp
double drag_fun_cpp(double uguess, double n_drag, double c_drag, double drag_upper_limit);
RcppExport SEXP _fgRcppNorway_drag_fun_cpp(SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(drag_fun_cpp(uguess, n_drag, c_drag, drag_upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// canopy_breadth_fun_cpp
double canopy_breadth_fun_cpp(double cr_width, double uguess, double n_drag, double c_drag, double drag_upper_limit);
RcppExport SEXP _fgRcppNorway_canopy_breadth_fun_cpp(SEXP cr_widthSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(canopy_breadth_fun_cpp(cr_width, uguess, n_drag, c_drag, drag_upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// max_gap_factor_fun_cpp
/* Common to Roughness and TMC Methods */  double max_gap_factor_fun_cpp(double gap_size, double ht);
RcppExport SEXP _fgRcppNorway_max_gap_factor_fun_cpp(SEXP gap_sizeSEXP, SEXP htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    rcpp_result_gen = Rcpp::wrap(max_gap_factor_fun_cpp(gap_size, ht));
    return rcpp_result_gen;
END_RCPP
}
// edge_gap_gust_factor_fun_cpp
double edge_gap_gust_factor_fun_cpp(double spacing, double mean_ht, double dist_edge, double gap_size, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_edge_gap_gust_factor_fun_cpp(SEXP spacingSEXP, SEXP mean_htSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type mean_ht(mean_htSEXP);
    Rcpp::traits::input_parameter< double >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< double >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(edge_gap_gust_factor_fun_cpp(spacing, mean_ht, dist_edge, gap_size, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// edge_gap_factor_fun_cpp
double edge_gap_factor_fun_cpp(double spacing, double equivalent_mean_ht, double dist_edge, double gap_size, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_edge_gap_factor_fun_cpp(SEXP spacingSEXP, SEXP equivalent_mean_htSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type equivalent_mean_ht(equivalent_mean_htSEXP);
    Rcpp::traits::input_parameter< double >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< double >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(edge_gap_factor_fun_cpp(spacing, equivalent_mean_ht, dist_edge, gap_size, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// tc_intercept_fun_cpp
double tc_intercept_fun_cpp(double dbh, double ht, std::string ci, double ci_value);
RcppExport SEXP _fgRcppNorway_tc_intercept_fun_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP ciSEXP, SEXP ci_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type ci_value(ci_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tc_intercept_fun_cpp(dbh, ht, ci, ci_value));
    return rcpp_result_gen;
END_RCPP
}
// tc_zero_intercept_fun_cpp
double tc_zero_intercept_fun_cpp(double dbh, double ht, std::string ci, double ci_value);
RcppExport SEXP _fgRcppNorway_tc_zero_intercept_fun_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP ciSEXP, SEXP ci_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type ci_value(ci_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tc_zero_intercept_fun_cpp(dbh, ht, ci, ci_value));
    return rcpp_result_gen;
END_RCPP
}
// tc_zero_intercept_new_bal_fun_cpp
double tc_zero_intercept_new_bal_fun_cpp(double dbh, double ht, std::string ci, double ci_value);
RcppExport SEXP _fgRcppNorway_tc_zero_intercept_new_bal_fun_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP ciSEXP, SEXP ci_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type ci_value(ci_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tc_zero_intercept_new_bal_fun_cpp(dbh, ht, ci, ci_value));
    return rcpp_result_gen;
END_RCPP
}
// tc_zero_intercept_fun_balBA_cpp
double tc_zero_intercept_fun_balBA_cpp(double dbh, double ht, std::string ci, double ci_value);
RcppExport SEXP _fgRcppNorway_tc_zero_intercept_fun_balBA_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP ciSEXP, SEXP ci_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type ci_value(ci_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tc_zero_intercept_fun_balBA_cpp(dbh, ht, ci, ci_value));
    return rcpp_result_gen;
END_RCPP
}
// critical_moment_breakage_rou_cpp
double critical_moment_breakage_rou_cpp(double dbh, double mor, double fknot);
RcppExport SEXP _fgRcppNorway_critical_moment_breakage_rou_cpp(SEXP dbhSEXP, SEXP morSEXP, SEXP fknotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type mor(morSEXP);
    Rcpp::traits::input_parameter< double >::type fknot(fknotSEXP);
    rcpp_result_gen = Rcpp::wrap(critical_moment_breakage_rou_cpp(dbh, mor, fknot));
    return rcpp_result_gen;
END_RCPP
}
// critical_moment_breakage_tmc_cpp
double critical_moment_breakage_tmc_cpp(double dbh, double ht, double cr_depth, double mor, double fknot);
RcppExport SEXP _fgRcppNorway_critical_moment_breakage_tmc_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP cr_depthSEXP, SEXP morSEXP, SEXP fknotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type mor(morSEXP);
    Rcpp::traits::input_parameter< double >::type fknot(fknotSEXP);
    rcpp_result_gen = Rcpp::wrap(critical_moment_breakage_tmc_cpp(dbh, ht, cr_depth, mor, fknot));
    return rcpp_result_gen;
END_RCPP
}
// critical_moment_overturning_cpp
double critical_moment_overturning_cpp(double c_reg, double stem_density, double stem_vol);
RcppExport SEXP _fgRcppNorway_critical_moment_overturning_cpp(SEXP c_regSEXP, SEXP stem_densitySEXP, SEXP stem_volSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c_reg(c_regSEXP);
    Rcpp::traits::input_parameter< double >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< double >::type stem_vol(stem_volSEXP);
    rcpp_result_gen = Rcpp::wrap(critical_moment_overturning_cpp(c_reg, stem_density, stem_vol));
    return rcpp_result_gen;
END_RCPP
}
// lambdacapital_fun_cpp
double lambdacapital_fun_cpp(double cr_width, double cr_depth, double spacing, double uguess, double n_drag, double c_drag, double drag_upper_limit);
RcppExport SEXP _fgRcppNorway_lambdacapital_fun_cpp(SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP spacingSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdacapital_fun_cpp(cr_width, cr_depth, spacing, uguess, n_drag, c_drag, drag_upper_limit));
    return rcpp_result_gen;
END_RCPP
}
// gammasolved_fun_cpp
double gammasolved_fun_cpp(double cr_width, double cr_depth, double spacing, double uguess, double n_drag, double c_drag, double drag_upper_limit, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_gammasolved_fun_cpp(SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP spacingSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(gammasolved_fun_cpp(cr_width, cr_depth, spacing, uguess, n_drag, c_drag, drag_upper_limit, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// zpd_fun_cpp
double zpd_fun_cpp(double cr_width, double cr_depth, double spacing, double uguess, double n_drag, double c_drag, double drag_upper_limit, double ht, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_zpd_fun_cpp(SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP spacingSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP htSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(zpd_fun_cpp(cr_width, cr_depth, spacing, uguess, n_drag, c_drag, drag_upper_limit, ht, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// z0_fun_cpp
double z0_fun_cpp(double cr_width, double cr_depth, double spacing, double uguess, double n_drag, double c_drag, double drag_upper_limit, double ht, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_z0_fun_cpp(SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP spacingSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP htSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(z0_fun_cpp(cr_width, cr_depth, spacing, uguess, n_drag, c_drag, drag_upper_limit, ht, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// tm_ratio_cpp
double tm_ratio_cpp(double spacing_before, double spacing_current, int years_since_thin, double cr_width, double cr_depth, double uguess, double n_drag, double c_drag, double drag_upper_limit, double ht, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_tm_ratio_cpp(SEXP spacing_beforeSEXP, SEXP spacing_currentSEXP, SEXP years_since_thinSEXP, SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP htSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< double >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< int >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(tm_ratio_cpp(spacing_before, spacing_current, years_since_thin, cr_width, cr_depth, uguess, n_drag, c_drag, drag_upper_limit, ht, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// tm_ratio_ci_cpp
double tm_ratio_ci_cpp(double spacing_before, double spacing_current, int years_since_thin, double cr_width, double cr_depth, double uguess, double n_drag, double c_drag, double drag_upper_limit, double ht, std::string ci, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_tm_ratio_ci_cpp(SEXP spacing_beforeSEXP, SEXP spacing_currentSEXP, SEXP years_since_thinSEXP, SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP htSEXP, SEXP ciSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< double >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< int >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(tm_ratio_ci_cpp(spacing_before, spacing_current, years_since_thin, cr_width, cr_depth, uguess, n_drag, c_drag, drag_upper_limit, ht, ci, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// tm_ratio_simple_cpp
double tm_ratio_simple_cpp(double spacing_before, double spacing_current, int years_since_thin);
RcppExport SEXP _fgRcppNorway_tm_ratio_simple_cpp(SEXP spacing_beforeSEXP, SEXP spacing_currentSEXP, SEXP years_since_thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< double >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< int >::type years_since_thin(years_since_thinSEXP);
    rcpp_result_gen = Rcpp::wrap(tm_ratio_simple_cpp(spacing_before, spacing_current, years_since_thin));
    return rcpp_result_gen;
END_RCPP
}
// tm_ratio_simple_ci_cpp
double tm_ratio_simple_ci_cpp(double spacing_before, double spacing_current, int years_since_thin, std::string ci);
RcppExport SEXP _fgRcppNorway_tm_ratio_simple_ci_cpp(SEXP spacing_beforeSEXP, SEXP spacing_currentSEXP, SEXP years_since_thinSEXP, SEXP ciSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< double >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< int >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci(ciSEXP);
    rcpp_result_gen = Rcpp::wrap(tm_ratio_simple_ci_cpp(spacing_before, spacing_current, years_since_thin, ci));
    return rcpp_result_gen;
END_RCPP
}
// bending_moment_rou_cpp
double bending_moment_rou_cpp(double dbh, double ht, double cr_width, double cr_depth, double spacing, double dist_edge, double gap_size, double uguess, double n_drag, double c_drag, double drag_upper_limit, double ro, Rcpp::DataFrame fgr_constants, double aerodynamic_ht);
RcppExport SEXP _fgRcppNorway_bending_moment_rou_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP cr_widthSEXP, SEXP cr_depthSEXP, SEXP spacingSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP uguessSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP roSEXP, SEXP fgr_constantsSEXP, SEXP aerodynamic_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< double >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< double >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type uguess(uguessSEXP);
    Rcpp::traits::input_parameter< double >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< double >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< double >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< double >::type ro(roSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< double >::type aerodynamic_ht(aerodynamic_htSEXP);
    rcpp_result_gen = Rcpp::wrap(bending_moment_rou_cpp(dbh, ht, cr_width, cr_depth, spacing, dist_edge, gap_size, uguess, n_drag, c_drag, drag_upper_limit, ro, fgr_constants, aerodynamic_ht));
    return rcpp_result_gen;
END_RCPP
}
// force_of_wind_fun_cpp
double force_of_wind_fun_cpp(double bm, double ht, double cr_depth);
RcppExport SEXP _fgRcppNorway_force_of_wind_fun_cpp(SEXP bmSEXP, SEXP htSEXP, SEXP cr_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bm(bmSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(force_of_wind_fun_cpp(bm, ht, cr_depth));
    return rcpp_result_gen;
END_RCPP
}
// r_fun_cpp
double r_fun_cpp(double lever_arm, double pull_height);
RcppExport SEXP _fgRcppNorway_r_fun_cpp(SEXP lever_armSEXP, SEXP pull_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lever_arm(lever_armSEXP);
    Rcpp::traits::input_parameter< double >::type pull_height(pull_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(r_fun_cpp(lever_arm, pull_height));
    return rcpp_result_gen;
END_RCPP
}
// i_fun_cpp
double i_fun_cpp(double dbh, double ht, double cr_depth);
RcppExport SEXP _fgRcppNorway_i_fun_cpp(SEXP dbhSEXP, SEXP htSEXP, SEXP cr_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(i_fun_cpp(dbh, ht, cr_depth));
    return rcpp_result_gen;
END_RCPP
}
// deflection_fun_cpp
double deflection_fun_cpp(double x, double lever_arm, double fow, double dbh, double ht, double cr_depth, double pull_height, double moe, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_deflection_fun_cpp(SEXP xSEXP, SEXP lever_armSEXP, SEXP fowSEXP, SEXP dbhSEXP, SEXP htSEXP, SEXP cr_depthSEXP, SEXP pull_heightSEXP, SEXP moeSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lever_arm(lever_armSEXP);
    Rcpp::traits::input_parameter< double >::type fow(fowSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type pull_height(pull_heightSEXP);
    Rcpp::traits::input_parameter< double >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(deflection_fun_cpp(x, lever_arm, fow, dbh, ht, cr_depth, pull_height, moe, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// dlf_fun_Norway_cpp
double dlf_fun_Norway_cpp(double bm, double ht, double cr_depth, double cr_width, double cr_prarea, double crown_off, double stem_vol, double dbh, double moe, double crown_density, double stem_density, double snow_load, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_dlf_fun_Norway_cpp(SEXP bmSEXP, SEXP htSEXP, SEXP cr_depthSEXP, SEXP cr_widthSEXP, SEXP cr_prareaSEXP, SEXP crown_offSEXP, SEXP stem_volSEXP, SEXP dbhSEXP, SEXP moeSEXP, SEXP crown_densitySEXP, SEXP stem_densitySEXP, SEXP snow_loadSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bm(bmSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< double >::type cr_prarea(cr_prareaSEXP);
    Rcpp::traits::input_parameter< double >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< double >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< double >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< double >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< double >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< double >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(dlf_fun_Norway_cpp(bm, ht, cr_depth, cr_width, cr_prarea, crown_off, stem_vol, dbh, moe, crown_density, stem_density, snow_load, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// uh_breakage_rou_Norway_cpp
Rcpp::DataFrame uh_breakage_rou_Norway_cpp(Rcpp::NumericVector mean_ht, Rcpp::NumericVector mean_dbh, Rcpp::NumericVector spacing, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector mean_cr_width, Rcpp::NumericVector mean_cr_depth, Rcpp::NumericVector mean_cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector moe, Rcpp::NumericVector mor, Rcpp::NumericVector fknot, Rcpp::NumericVector n_drag, Rcpp::NumericVector c_drag, Rcpp::NumericVector drag_upper_limit, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, double ro, Rcpp::DataFrame fgr_constants, Rcpp::NumericVector aerodynamic_ht);
RcppExport SEXP _fgRcppNorway_uh_breakage_rou_Norway_cpp(SEXP mean_htSEXP, SEXP mean_dbhSEXP, SEXP spacingSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP mean_cr_widthSEXP, SEXP mean_cr_depthSEXP, SEXP mean_cr_prareaSEXP, SEXP crown_offSEXP, SEXP moeSEXP, SEXP morSEXP, SEXP fknotSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP roSEXP, SEXP fgr_constantsSEXP, SEXP aerodynamic_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_ht(mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_dbh(mean_dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_width(mean_cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_depth(mean_cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_prarea(mean_cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mor(morSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fknot(fknotSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< double >::type ro(roSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type aerodynamic_ht(aerodynamic_htSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_breakage_rou_Norway_cpp(mean_ht, mean_dbh, spacing, dist_edge, gap_size, mean_cr_width, mean_cr_depth, mean_cr_prarea, crown_off, moe, mor, fknot, n_drag, c_drag, drag_upper_limit, stem_vol, stem_density, crown_density, snow_load, ro, fgr_constants, aerodynamic_ht));
    return rcpp_result_gen;
END_RCPP
}
// uh_breakage_tmc_Norway_cpp
Rcpp::DataFrame uh_breakage_tmc_Norway_cpp(Rcpp::NumericVector tree_ht, Rcpp::NumericVector dbh, Rcpp::NumericVector cr_depth, Rcpp::NumericVector cr_width, Rcpp::NumericVector cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector spacing_current, Rcpp::NumericVector spacing_before, Rcpp::IntegerVector years_since_thin, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector moe, Rcpp::NumericVector mor, Rcpp::NumericVector fknot, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, Rcpp::StringVector ci, Rcpp::NumericVector ci_value, Rcpp::NumericVector n_drag, Rcpp::NumericVector c_drag, Rcpp::NumericVector drag_upper_limit, Rcpp::NumericVector equivalent_mean_ht, Rcpp::NumericVector stand_cr_depth, Rcpp::NumericVector stand_cr_width, Rcpp::DataFrame fgr_constants, Rcpp::NumericVector aerodynamic_ht);
RcppExport SEXP _fgRcppNorway_uh_breakage_tmc_Norway_cpp(SEXP tree_htSEXP, SEXP dbhSEXP, SEXP cr_depthSEXP, SEXP cr_widthSEXP, SEXP cr_prareaSEXP, SEXP crown_offSEXP, SEXP spacing_currentSEXP, SEXP spacing_beforeSEXP, SEXP years_since_thinSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP moeSEXP, SEXP morSEXP, SEXP fknotSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP ciSEXP, SEXP ci_valueSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP equivalent_mean_htSEXP, SEXP stand_cr_depthSEXP, SEXP stand_cr_widthSEXP, SEXP fgr_constantsSEXP, SEXP aerodynamic_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_prarea(cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mor(morSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fknot(fknotSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ci_value(ci_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type equivalent_mean_ht(equivalent_mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stand_cr_depth(stand_cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stand_cr_width(stand_cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type aerodynamic_ht(aerodynamic_htSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_breakage_tmc_Norway_cpp(tree_ht, dbh, cr_depth, cr_width, cr_prarea, crown_off, spacing_current, spacing_before, years_since_thin, dist_edge, gap_size, moe, mor, fknot, stem_vol, stem_density, crown_density, snow_load, ci, ci_value, n_drag, c_drag, drag_upper_limit, equivalent_mean_ht, stand_cr_depth, stand_cr_width, fgr_constants, aerodynamic_ht));
    return rcpp_result_gen;
END_RCPP
}
// uh_breakage_tmc_tmr_simple_Norway_cpp
Rcpp::DataFrame uh_breakage_tmc_tmr_simple_Norway_cpp(Rcpp::NumericVector tree_ht, Rcpp::NumericVector dbh, Rcpp::NumericVector cr_depth, Rcpp::NumericVector cr_width, Rcpp::NumericVector cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector spacing_current, Rcpp::NumericVector spacing_before, Rcpp::IntegerVector years_since_thin, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector equivalent_mean_ht, Rcpp::NumericVector moe, Rcpp::NumericVector mor, Rcpp::NumericVector fknot, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, Rcpp::StringVector ci, Rcpp::NumericVector ci_value, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_uh_breakage_tmc_tmr_simple_Norway_cpp(SEXP tree_htSEXP, SEXP dbhSEXP, SEXP cr_depthSEXP, SEXP cr_widthSEXP, SEXP cr_prareaSEXP, SEXP crown_offSEXP, SEXP spacing_currentSEXP, SEXP spacing_beforeSEXP, SEXP years_since_thinSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP equivalent_mean_htSEXP, SEXP moeSEXP, SEXP morSEXP, SEXP fknotSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP ciSEXP, SEXP ci_valueSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_prarea(cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type equivalent_mean_ht(equivalent_mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mor(morSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fknot(fknotSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ci_value(ci_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_breakage_tmc_tmr_simple_Norway_cpp(tree_ht, dbh, cr_depth, cr_width, cr_prarea, crown_off, spacing_current, spacing_before, years_since_thin, dist_edge, gap_size, equivalent_mean_ht, moe, mor, fknot, stem_vol, stem_density, crown_density, snow_load, ci, ci_value, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// uh_overturning_rou_Norway_cpp
Rcpp::DataFrame uh_overturning_rou_Norway_cpp(Rcpp::NumericVector mean_ht, Rcpp::NumericVector mean_dbh, Rcpp::NumericVector spacing, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector mean_cr_width, Rcpp::NumericVector mean_cr_depth, Rcpp::NumericVector mean_cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector moe, Rcpp::NumericVector c_reg, Rcpp::NumericVector n_drag, Rcpp::NumericVector c_drag, Rcpp::NumericVector drag_upper_limit, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, double ro, Rcpp::DataFrame fgr_constants, Rcpp::NumericVector aerodynamic_ht);
RcppExport SEXP _fgRcppNorway_uh_overturning_rou_Norway_cpp(SEXP mean_htSEXP, SEXP mean_dbhSEXP, SEXP spacingSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP mean_cr_widthSEXP, SEXP mean_cr_depthSEXP, SEXP mean_cr_prareaSEXP, SEXP crown_offSEXP, SEXP moeSEXP, SEXP c_regSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP roSEXP, SEXP fgr_constantsSEXP, SEXP aerodynamic_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_ht(mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_dbh(mean_dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_width(mean_cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_depth(mean_cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mean_cr_prarea(mean_cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_reg(c_regSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< double >::type ro(roSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type aerodynamic_ht(aerodynamic_htSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_overturning_rou_Norway_cpp(mean_ht, mean_dbh, spacing, dist_edge, gap_size, mean_cr_width, mean_cr_depth, mean_cr_prarea, crown_off, moe, c_reg, n_drag, c_drag, drag_upper_limit, stem_vol, stem_density, crown_density, snow_load, ro, fgr_constants, aerodynamic_ht));
    return rcpp_result_gen;
END_RCPP
}
// uh_overturning_tmc_Norway_cpp
Rcpp::DataFrame uh_overturning_tmc_Norway_cpp(Rcpp::NumericVector tree_ht, Rcpp::NumericVector dbh, Rcpp::NumericVector cr_depth, Rcpp::NumericVector cr_width, Rcpp::NumericVector cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector spacing_current, Rcpp::NumericVector spacing_before, Rcpp::IntegerVector years_since_thin, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector moe, Rcpp::NumericVector c_reg, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, Rcpp::StringVector ci, Rcpp::NumericVector ci_value, Rcpp::NumericVector n_drag, Rcpp::NumericVector c_drag, Rcpp::NumericVector drag_upper_limit, Rcpp::NumericVector equivalent_mean_ht, Rcpp::NumericVector stand_cr_depth, Rcpp::NumericVector stand_cr_width, Rcpp::DataFrame fgr_constants, Rcpp::NumericVector aerodynamic_ht);
RcppExport SEXP _fgRcppNorway_uh_overturning_tmc_Norway_cpp(SEXP tree_htSEXP, SEXP dbhSEXP, SEXP cr_depthSEXP, SEXP cr_widthSEXP, SEXP cr_prareaSEXP, SEXP crown_offSEXP, SEXP spacing_currentSEXP, SEXP spacing_beforeSEXP, SEXP years_since_thinSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP moeSEXP, SEXP c_regSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP ciSEXP, SEXP ci_valueSEXP, SEXP n_dragSEXP, SEXP c_dragSEXP, SEXP drag_upper_limitSEXP, SEXP equivalent_mean_htSEXP, SEXP stand_cr_depthSEXP, SEXP stand_cr_widthSEXP, SEXP fgr_constantsSEXP, SEXP aerodynamic_htSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_prarea(cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_reg(c_regSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ci_value(ci_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type n_drag(n_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_drag(c_dragSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type drag_upper_limit(drag_upper_limitSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type equivalent_mean_ht(equivalent_mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stand_cr_depth(stand_cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stand_cr_width(stand_cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type aerodynamic_ht(aerodynamic_htSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_overturning_tmc_Norway_cpp(tree_ht, dbh, cr_depth, cr_width, cr_prarea, crown_off, spacing_current, spacing_before, years_since_thin, dist_edge, gap_size, moe, c_reg, stem_vol, stem_density, crown_density, snow_load, ci, ci_value, n_drag, c_drag, drag_upper_limit, equivalent_mean_ht, stand_cr_depth, stand_cr_width, fgr_constants, aerodynamic_ht));
    return rcpp_result_gen;
END_RCPP
}
// uh_overturning_tmc_tmr_simple_cpp
Rcpp::DataFrame uh_overturning_tmc_tmr_simple_cpp(Rcpp::NumericVector tree_ht, Rcpp::NumericVector dbh, Rcpp::NumericVector cr_depth, Rcpp::NumericVector cr_width, Rcpp::NumericVector cr_prarea, Rcpp::NumericVector crown_off, Rcpp::NumericVector spacing_current, Rcpp::NumericVector spacing_before, Rcpp::IntegerVector years_since_thin, Rcpp::NumericVector dist_edge, Rcpp::NumericVector gap_size, Rcpp::NumericVector equivalent_mean_ht, Rcpp::NumericVector moe, Rcpp::NumericVector c_reg, Rcpp::NumericVector stem_vol, Rcpp::NumericVector stem_density, Rcpp::NumericVector crown_density, Rcpp::NumericVector snow_load, Rcpp::StringVector ci, Rcpp::NumericVector ci_value, Rcpp::DataFrame fgr_constants);
RcppExport SEXP _fgRcppNorway_uh_overturning_tmc_tmr_simple_cpp(SEXP tree_htSEXP, SEXP dbhSEXP, SEXP cr_depthSEXP, SEXP cr_widthSEXP, SEXP cr_prareaSEXP, SEXP crown_offSEXP, SEXP spacing_currentSEXP, SEXP spacing_beforeSEXP, SEXP years_since_thinSEXP, SEXP dist_edgeSEXP, SEXP gap_sizeSEXP, SEXP equivalent_mean_htSEXP, SEXP moeSEXP, SEXP c_regSEXP, SEXP stem_volSEXP, SEXP stem_densitySEXP, SEXP crown_densitySEXP, SEXP snow_loadSEXP, SEXP ciSEXP, SEXP ci_valueSEXP, SEXP fgr_constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_width(cr_widthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_prarea(cr_prareaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_off(crown_offSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_current(spacing_currentSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type spacing_before(spacing_beforeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type years_since_thin(years_since_thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dist_edge(dist_edgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gap_size(gap_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type equivalent_mean_ht(equivalent_mean_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_reg(c_regSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_vol(stem_volSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stem_density(stem_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type crown_density(crown_densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snow_load(snow_loadSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ci_value(ci_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_overturning_tmc_tmr_simple_cpp(tree_ht, dbh, cr_depth, cr_width, cr_prarea, crown_off, spacing_current, spacing_before, years_since_thin, dist_edge, gap_size, equivalent_mean_ht, moe, c_reg, stem_vol, stem_density, crown_density, snow_load, ci, ci_value, fgr_constants));
    return rcpp_result_gen;
END_RCPP
}
// csw_Norway_cpp
double csw_Norway_cpp(double tree_ht, double tree_dbh, double crown_weight, double cr_depth, double moe, double grav);
RcppExport SEXP _fgRcppNorway_csw_Norway_cpp(SEXP tree_htSEXP, SEXP tree_dbhSEXP, SEXP crown_weightSEXP, SEXP cr_depthSEXP, SEXP moeSEXP, SEXP gravSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< double >::type tree_dbh(tree_dbhSEXP);
    Rcpp::traits::input_parameter< double >::type crown_weight(crown_weightSEXP);
    Rcpp::traits::input_parameter< double >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< double >::type moe(moeSEXP);
    Rcpp::traits::input_parameter< double >::type grav(gravSEXP);
    rcpp_result_gen = Rcpp::wrap(csw_Norway_cpp(tree_ht, tree_dbh, crown_weight, cr_depth, moe, grav));
    return rcpp_result_gen;
END_RCPP
}
// elevate_cpp
double elevate_cpp(double uh, double z0, double d, double ht, double ht_above_d);
RcppExport SEXP _fgRcppNorway_elevate_cpp(SEXP uhSEXP, SEXP z0SEXP, SEXP dSEXP, SEXP htSEXP, SEXP ht_above_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type uh(uhSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type ht(htSEXP);
    Rcpp::traits::input_parameter< double >::type ht_above_d(ht_above_dSEXP);
    rcpp_result_gen = Rcpp::wrap(elevate_cpp(uh, z0, d, ht, ht_above_d));
    return rcpp_result_gen;
END_RCPP
}
// uh_breakage_heightz_cpp
Rcpp::DataFrame uh_breakage_heightz_cpp(Rcpp::NumericVector uh_b, Rcpp::NumericVector tree_ht, Rcpp::NumericVector cr_depth, Rcpp::NumericVector dbh, double m);
RcppExport SEXP _fgRcppNorway_uh_breakage_heightz_cpp(SEXP uh_bSEXP, SEXP tree_htSEXP, SEXP cr_depthSEXP, SEXP dbhSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type uh_b(uh_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tree_ht(tree_htSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cr_depth(cr_depthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(uh_breakage_heightz_cpp(uh_b, tree_ht, cr_depth, dbh, m));
    return rcpp_result_gen;
END_RCPP
}
// fg_rou_Norway_cpp
Rcpp::List fg_rou_Norway_cpp(Rcpp::List inputdata_full, Rcpp::DataFrame fgr_constants, Rcpp::DataFrame species_parameters, Rcpp::Nullable<Rcpp::NumericVector> full_output_, std::string breakage_basecanopy);
RcppExport SEXP _fgRcppNorway_fg_rou_Norway_cpp(SEXP inputdata_fullSEXP, SEXP fgr_constantsSEXP, SEXP species_parametersSEXP, SEXP full_output_SEXP, SEXP breakage_basecanopySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type inputdata_full(inputdata_fullSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type full_output_(full_output_SEXP);
    Rcpp::traits::input_parameter< std::string >::type breakage_basecanopy(breakage_basecanopySEXP);
    rcpp_result_gen = Rcpp::wrap(fg_rou_Norway_cpp(inputdata_full, fgr_constants, species_parameters, full_output_, breakage_basecanopy));
    return rcpp_result_gen;
END_RCPP
}
// fg_tmc_Norway_cpp
Rcpp::List fg_tmc_Norway_cpp(Rcpp::List inputdata_full, Rcpp::DataFrame fgr_constants, Rcpp::DataFrame species_parameters, Rcpp::Nullable<Rcpp::NumericVector> full_output_, std::string breakage_basecanopy);
RcppExport SEXP _fgRcppNorway_fg_tmc_Norway_cpp(SEXP inputdata_fullSEXP, SEXP fgr_constantsSEXP, SEXP species_parametersSEXP, SEXP full_output_SEXP, SEXP breakage_basecanopySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type inputdata_full(inputdata_fullSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type fgr_constants(fgr_constantsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type species_parameters(species_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type full_output_(full_output_SEXP);
    Rcpp::traits::input_parameter< std::string >::type breakage_basecanopy(breakage_basecanopySEXP);
    rcpp_result_gen = Rcpp::wrap(fg_tmc_Norway_cpp(inputdata_full, fgr_constants, species_parameters, full_output_, breakage_basecanopy));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fgRcppNorway_contains_cpp", (DL_FUNC) &_fgRcppNorway_contains_cpp, 2},
    {"_fgRcppNorway_extract_create_numcolumns_cpp", (DL_FUNC) &_fgRcppNorway_extract_create_numcolumns_cpp, 3},
    {"_fgRcppNorway_extract_create_intcolumns_cpp", (DL_FUNC) &_fgRcppNorway_extract_create_intcolumns_cpp, 3},
    {"_fgRcppNorway_extract_create_strcolumns_cpp", (DL_FUNC) &_fgRcppNorway_extract_create_strcolumns_cpp, 3},
    {"_fgRcppNorway_sp_params_Norway_fun_cpp", (DL_FUNC) &_fgRcppNorway_sp_params_Norway_fun_cpp, 5},
    {"_fgRcppNorway_top_ht_to_mean_ht_cpp", (DL_FUNC) &_fgRcppNorway_top_ht_to_mean_ht_cpp, 3},
    {"_fgRcppNorway_mean_ht_to_top_ht_cpp", (DL_FUNC) &_fgRcppNorway_mean_ht_to_top_ht_cpp, 3},
    {"_fgRcppNorway_eq_mean_ht_fun_cpp", (DL_FUNC) &_fgRcppNorway_eq_mean_ht_fun_cpp, 1},
    {"_fgRcppNorway_canopy_width_fun_cpp", (DL_FUNC) &_fgRcppNorway_canopy_width_fun_cpp, 3},
    {"_fgRcppNorway_canopy_depth_Norway_fun_cpp", (DL_FUNC) &_fgRcppNorway_canopy_depth_Norway_fun_cpp, 5},
    {"_fgRcppNorway_stem_volume_fonweban_cpp", (DL_FUNC) &_fgRcppNorway_stem_volume_fonweban_cpp, 3},
    {"_fgRcppNorway_stem_volume_quebec_cpp", (DL_FUNC) &_fgRcppNorway_stem_volume_quebec_cpp, 3},
    {"_fgRcppNorway_stem_volume_laasasenaho_cpp", (DL_FUNC) &_fgRcppNorway_stem_volume_laasasenaho_cpp, 3},
    {"_fgRcppNorway_stem_volume_japanese_larch_japan_cpp", (DL_FUNC) &_fgRcppNorway_stem_volume_japanese_larch_japan_cpp, 2},
    {"_fgRcppNorway_stem_vol_andretreslag_fun_cpp", (DL_FUNC) &_fgRcppNorway_stem_vol_andretreslag_fun_cpp, 4},
    {"_fgRcppNorway_stem_vol_NSNorway_fun_cpp", (DL_FUNC) &_fgRcppNorway_stem_vol_NSNorway_fun_cpp, 5},
    {"_fgRcppNorway_stem_vol_SPNorway_fun_cpp", (DL_FUNC) &_fgRcppNorway_stem_vol_SPNorway_fun_cpp, 5},
    {"_fgRcppNorway_stem_vol_BINorway_fun_cpp", (DL_FUNC) &_fgRcppNorway_stem_vol_BINorway_fun_cpp, 5},
    {"_fgRcppNorway_stem_vol_Norway_fun_cpp", (DL_FUNC) &_fgRcppNorway_stem_vol_Norway_fun_cpp, 6},
    {"_fgRcppNorway_fg_rou_dataprep_Norway_cpp", (DL_FUNC) &_fgRcppNorway_fg_rou_dataprep_Norway_cpp, 5},
    {"_fgRcppNorway_fg_tmc_dataprep_Norway_cpp", (DL_FUNC) &_fgRcppNorway_fg_tmc_dataprep_Norway_cpp, 5},
    {"_fgRcppNorway_diam_base_fun_cpp", (DL_FUNC) &_fgRcppNorway_diam_base_fun_cpp, 3},
    {"_fgRcppNorway_drag_fun_cpp", (DL_FUNC) &_fgRcppNorway_drag_fun_cpp, 4},
    {"_fgRcppNorway_canopy_breadth_fun_cpp", (DL_FUNC) &_fgRcppNorway_canopy_breadth_fun_cpp, 5},
    {"_fgRcppNorway_max_gap_factor_fun_cpp", (DL_FUNC) &_fgRcppNorway_max_gap_factor_fun_cpp, 2},
    {"_fgRcppNorway_edge_gap_gust_factor_fun_cpp", (DL_FUNC) &_fgRcppNorway_edge_gap_gust_factor_fun_cpp, 5},
    {"_fgRcppNorway_edge_gap_factor_fun_cpp", (DL_FUNC) &_fgRcppNorway_edge_gap_factor_fun_cpp, 5},
    {"_fgRcppNorway_tc_intercept_fun_cpp", (DL_FUNC) &_fgRcppNorway_tc_intercept_fun_cpp, 4},
    {"_fgRcppNorway_tc_zero_intercept_fun_cpp", (DL_FUNC) &_fgRcppNorway_tc_zero_intercept_fun_cpp, 4},
    {"_fgRcppNorway_tc_zero_intercept_new_bal_fun_cpp", (DL_FUNC) &_fgRcppNorway_tc_zero_intercept_new_bal_fun_cpp, 4},
    {"_fgRcppNorway_tc_zero_intercept_fun_balBA_cpp", (DL_FUNC) &_fgRcppNorway_tc_zero_intercept_fun_balBA_cpp, 4},
    {"_fgRcppNorway_critical_moment_breakage_rou_cpp", (DL_FUNC) &_fgRcppNorway_critical_moment_breakage_rou_cpp, 3},
    {"_fgRcppNorway_critical_moment_breakage_tmc_cpp", (DL_FUNC) &_fgRcppNorway_critical_moment_breakage_tmc_cpp, 5},
    {"_fgRcppNorway_critical_moment_overturning_cpp", (DL_FUNC) &_fgRcppNorway_critical_moment_overturning_cpp, 3},
    {"_fgRcppNorway_lambdacapital_fun_cpp", (DL_FUNC) &_fgRcppNorway_lambdacapital_fun_cpp, 7},
    {"_fgRcppNorway_gammasolved_fun_cpp", (DL_FUNC) &_fgRcppNorway_gammasolved_fun_cpp, 8},
    {"_fgRcppNorway_zpd_fun_cpp", (DL_FUNC) &_fgRcppNorway_zpd_fun_cpp, 9},
    {"_fgRcppNorway_z0_fun_cpp", (DL_FUNC) &_fgRcppNorway_z0_fun_cpp, 9},
    {"_fgRcppNorway_tm_ratio_cpp", (DL_FUNC) &_fgRcppNorway_tm_ratio_cpp, 11},
    {"_fgRcppNorway_tm_ratio_ci_cpp", (DL_FUNC) &_fgRcppNorway_tm_ratio_ci_cpp, 12},
    {"_fgRcppNorway_tm_ratio_simple_cpp", (DL_FUNC) &_fgRcppNorway_tm_ratio_simple_cpp, 3},
    {"_fgRcppNorway_tm_ratio_simple_ci_cpp", (DL_FUNC) &_fgRcppNorway_tm_ratio_simple_ci_cpp, 4},
    {"_fgRcppNorway_bending_moment_rou_cpp", (DL_FUNC) &_fgRcppNorway_bending_moment_rou_cpp, 14},
    {"_fgRcppNorway_force_of_wind_fun_cpp", (DL_FUNC) &_fgRcppNorway_force_of_wind_fun_cpp, 3},
    {"_fgRcppNorway_r_fun_cpp", (DL_FUNC) &_fgRcppNorway_r_fun_cpp, 2},
    {"_fgRcppNorway_i_fun_cpp", (DL_FUNC) &_fgRcppNorway_i_fun_cpp, 3},
    {"_fgRcppNorway_deflection_fun_cpp", (DL_FUNC) &_fgRcppNorway_deflection_fun_cpp, 9},
    {"_fgRcppNorway_dlf_fun_Norway_cpp", (DL_FUNC) &_fgRcppNorway_dlf_fun_Norway_cpp, 13},
    {"_fgRcppNorway_uh_breakage_rou_Norway_cpp", (DL_FUNC) &_fgRcppNorway_uh_breakage_rou_Norway_cpp, 22},
    {"_fgRcppNorway_uh_breakage_tmc_Norway_cpp", (DL_FUNC) &_fgRcppNorway_uh_breakage_tmc_Norway_cpp, 28},
    {"_fgRcppNorway_uh_breakage_tmc_tmr_simple_Norway_cpp", (DL_FUNC) &_fgRcppNorway_uh_breakage_tmc_tmr_simple_Norway_cpp, 22},
    {"_fgRcppNorway_uh_overturning_rou_Norway_cpp", (DL_FUNC) &_fgRcppNorway_uh_overturning_rou_Norway_cpp, 21},
    {"_fgRcppNorway_uh_overturning_tmc_Norway_cpp", (DL_FUNC) &_fgRcppNorway_uh_overturning_tmc_Norway_cpp, 27},
    {"_fgRcppNorway_uh_overturning_tmc_tmr_simple_cpp", (DL_FUNC) &_fgRcppNorway_uh_overturning_tmc_tmr_simple_cpp, 21},
    {"_fgRcppNorway_csw_Norway_cpp", (DL_FUNC) &_fgRcppNorway_csw_Norway_cpp, 6},
    {"_fgRcppNorway_elevate_cpp", (DL_FUNC) &_fgRcppNorway_elevate_cpp, 5},
    {"_fgRcppNorway_uh_breakage_heightz_cpp", (DL_FUNC) &_fgRcppNorway_uh_breakage_heightz_cpp, 5},
    {"_fgRcppNorway_fg_rou_Norway_cpp", (DL_FUNC) &_fgRcppNorway_fg_rou_Norway_cpp, 5},
    {"_fgRcppNorway_fg_tmc_Norway_cpp", (DL_FUNC) &_fgRcppNorway_fg_tmc_Norway_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_fgRcppNorway(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
